"""
in this assignment, we're gonna look at `dictionaries` (often shortened to "dict" in python speak).
they're another data type similar to lists, tuples, etc. that containes other data. just like
a list contains other python objects (ie. the list [1, 2, 3] contains three integers), the dict
is also a way to store data.
dicts are a collection of "keys" and "values." keys are used to look up the value you're interested
in accessing. you can think of them like a name or an address. Dicts are also called "look-up tables"
or "maps" in other languages.
here's an example of one in action:
d = {'a': 1, 'b': 2}
this is one way to initialize a dict in python. this code says "d is a dict where the value for key 'a'
is 1 and the value for key 'b' is 2. these values are accessed like so:
d['a'] # this returns 1
d['b'] # this returns 2
notice how you're using that same index syntax you would if you were grabbing an item from a list.
the difference here is that the index to a list has to be an integer, but the key to a dict can be lots
of different types (strings, integers, booleans, etc).
to assign a value in a dict, you can similarly do:
d['a'] = 5
d['b'] = 6
d['blah'] = 100
d[True] = 5
you can add and remove keys at any point, they don't need to be known when you create the dictionary.
"""

"""
**********
PROBLEM #1
**********
with that stuff out of the way, we'll look at a fairly typical usage of dicts: a word counter. you
get a list of words, and your task is to iterate through those words and count how many of each there
is.
"""
word_counts = {}  # word_counts is initialized to an empty dict
#This dictionary is initialized. No values. Just created.

text  = ['cat', 'dog', 'bird','cat','cat','cat','cat','cat','cat','dog','dog','dog','dog','dog','dog']
#This new variable "text" is created. The list to the right is added to this variable.

for word in text:
    if word in word_counts:
        print("encountered word we've seen before:",word, "This shit is good. It goes up by 1. Dolla dolla billz")
        word_counts[word] += 1
    else:
        print("encountered unseen word. ALIEN!:",word, ". Adding to word_counts and setting value to 1")
        word_counts[word] = 1


#This for loop is the shit. It creates a new variable called "Word" and iterates over the list TEXT.
#Don't forget you got hung up on the idea of how "WORD" adds new values in to the dictionary word_counts
#the "Else" statement not only means "Otherwise, if the value of word is not in word_counts then it is one."
#This ALSO means that "Otherwise, if the value of word is not in word_counts, create a new value and assign the number "1" to it


# the following assertions check to see whether your solution works. REMINDER: don't change these
# assertions or the hw can't grade itself anymore.

assert word_counts['cat'] == 7
assert word_counts['dog'] == 7
assert word_counts['bird'] == 1

"""
**********
PROBLEM #2
**********
similar to problem #1, but instead of counting words, now we're going to count based on some condition.
you're provided with a list of integers, and your task is to calculate the ratio of even numbers to odd numbers.
there are a few different ways you can represent your keys, but the crux of it is that your dict will track two
key value pairs: one for evens, one for odds.
once you've done your counts, set `even_to_odd_ratio` to be the number of evens divided by the number of odds.
"""

ints = [1, 2, 3, 3, 3, 4, 5, 5, 6]  # 6 odds, 3 evens
even_odd_counts = {'even' : 0, 'odd' : 0}  # use this dict to count evens & odds

for i in ints:
        if (i % 2) !=0:
            even_odd_counts['odd'] += 1
            print("encountered existing number:", i, "Dolla dolla billz")
        else:
            even_odd_counts['even'] += 1
            print("encountered unseen Number. ALIEN!:", i)

# TODO replace `None` with the number of evens divided by the number of odds
#print(even_odd_counts)
even_to_odd_ratio = (even_odd_counts['even'])/(even_odd_counts['odd'])

assert even_to_odd_ratio == .5



