"""
Part 1:
Fill in the code for `backwards`. If you've implemented it correctly,
the `assert` statements down below it should not throw an error.
"""

def backwards(x):
    """
    This function takes in an iterable (string, list, etc.)
    and returns its contents in reverse order
    """
    return x
    assert backwards('cat') == 'tac'
    assert backwards([1, 2, 3]) == [3, 2, 1]
    print (x)

"""
Part 2:
Create a function called `is_even` that takes in a number and returns True
if that number is even, otherwise return False.
Hint: this is often done using something called the "modulo operator." it is
a mathematical operator like the plus sign or minus sign, represented by the % sign.
here's an example of it in action:
    10 % 3  # this returns 1
    5 % 3   # this returns 2
Modulo is a fancy way of saying "take the remainder". So 10 % 3 = 1 could be
read as "the remainder of 10 divided by 3 is 1." Similarly, 5 % 3 is "the
remainder of 5 divided by 3" and that returns 2.
Think of how you could use this operator to check if a number is even or odd
and use it to implement is_even
"""

def is_even(x):
    """Your implementation goes here"""
    if x % 2 == 0:
        print ("Booyah")
    else: x % 2 != 0
    print ("Nah dog")

    return False
    assert is_even(5) == False
    assert is_even(4) == True


"""
Part 3:
You're given an empty list called `even_numbers`.
Loop through all numbers from 0 to 100 (inclusive).
If a number is even, append it to `even_numbers`.
By the end of your loop, `even_numbers` should contain all evens between 0 and 100 inclusive.
Finally, see if you can produce that same list of evens, but in only one line of code.
"""

even_numbers = []

# Your loop goes here

for even_numbers in range(0,102,2):
    print(even_numbers)

assert len(even_numbers) == 51  # there should be 51 even numbers counting both 0 and 100
assert 2 in even_numbers        # 2 should be in there
assert 100 in even_numbers      # as should 100
assert 99 not in even_numbers   # but not 99


# now, try to generate that same list of evens in one line of code for `even_numbers2`

even_numbers2 == list(range(0, 102, 2))  # replace 0's with the proper values to get the same values as `even_numbers`
assert even_numbers == even_numbers2
